// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// huberMean
Rcpp::List huberMean(const arma::vec& X, const double epsilon, const int iteMax);
RcppExport SEXP _tfHuber_huberMean(SEXP XSEXP, SEXP epsilonSEXP, SEXP iteMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const int >::type iteMax(iteMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(huberMean(X, epsilon, iteMax));
    return rcpp_result_gen;
END_RCPP
}
// huberCov
arma::mat huberCov(const arma::mat& X, const double epsilon, const int iteMax);
RcppExport SEXP _tfHuber_huberCov(SEXP XSEXP, SEXP epsilonSEXP, SEXP iteMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const int >::type iteMax(iteMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(huberCov(X, epsilon, iteMax));
    return rcpp_result_gen;
END_RCPP
}
// huberReg
Rcpp::List huberReg(const arma::mat& X, const arma::vec& Y, const double epsilon, const double constTau, const int iteMax);
RcppExport SEXP _tfHuber_huberReg(SEXP XSEXP, SEXP YSEXP, SEXP epsilonSEXP, SEXP constTauSEXP, SEXP iteMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const double >::type constTau(constTauSEXP);
    Rcpp::traits::input_parameter< const int >::type iteMax(iteMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(huberReg(X, Y, epsilon, constTau, iteMax));
    return rcpp_result_gen;
END_RCPP
}
// cvHuberLasso
Rcpp::List cvHuberLasso(const arma::mat& X, const arma::vec& Y, Rcpp::Nullable<Rcpp::NumericVector> lSeq, int nlambda, const double constTau, const double phi0, const double gamma, const double epsilon_c, const int iteMax, int nfolds);
RcppExport SEXP _tfHuber_cvHuberLasso(SEXP XSEXP, SEXP YSEXP, SEXP lSeqSEXP, SEXP nlambdaSEXP, SEXP constTauSEXP, SEXP phi0SEXP, SEXP gammaSEXP, SEXP epsilon_cSEXP, SEXP iteMaxSEXP, SEXP nfoldsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type lSeq(lSeqSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type constTau(constTauSEXP);
    Rcpp::traits::input_parameter< const double >::type phi0(phi0SEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon_c(epsilon_cSEXP);
    Rcpp::traits::input_parameter< const int >::type iteMax(iteMaxSEXP);
    Rcpp::traits::input_parameter< int >::type nfolds(nfoldsSEXP);
    rcpp_result_gen = Rcpp::wrap(cvHuberLasso(X, Y, lSeq, nlambda, constTau, phi0, gamma, epsilon_c, iteMax, nfolds));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tfHuber_huberMean", (DL_FUNC) &_tfHuber_huberMean, 3},
    {"_tfHuber_huberCov", (DL_FUNC) &_tfHuber_huberCov, 3},
    {"_tfHuber_huberReg", (DL_FUNC) &_tfHuber_huberReg, 5},
    {"_tfHuber_cvHuberLasso", (DL_FUNC) &_tfHuber_cvHuberLasso, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_tfHuber(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
