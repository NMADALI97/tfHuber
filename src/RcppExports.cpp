// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// f1
double f1(const double x, const arma::vec& resSq, const int n);
RcppExport SEXP _tfHuber_f1(SEXP xSEXP, SEXP resSqSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type resSq(resSqSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(f1(x, resSq, n));
    return rcpp_result_gen;
END_RCPP
}
// rootf1
double rootf1(const arma::vec& resSq, const int n, double low, double up, const double tol, const int maxIte);
RcppExport SEXP _tfHuber_rootf1(SEXP resSqSEXP, SEXP nSEXP, SEXP lowSEXP, SEXP upSEXP, SEXP tolSEXP, SEXP maxIteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type resSq(resSqSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type up(upSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIte(maxIteSEXP);
    rcpp_result_gen = Rcpp::wrap(rootf1(resSq, n, low, up, tol, maxIte));
    return rcpp_result_gen;
END_RCPP
}
// f2
double f2(const double x, const arma::vec& resSq, const int n, const int d);
RcppExport SEXP _tfHuber_f2(SEXP xSEXP, SEXP resSqSEXP, SEXP nSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type resSq(resSqSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(f2(x, resSq, n, d));
    return rcpp_result_gen;
END_RCPP
}
// rootf2
double rootf2(const arma::vec& resSq, const int n, const int d, double low, double up, const double tol, const int maxIte);
RcppExport SEXP _tfHuber_rootf2(SEXP resSqSEXP, SEXP nSEXP, SEXP dSEXP, SEXP lowSEXP, SEXP upSEXP, SEXP tolSEXP, SEXP maxIteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type resSq(resSqSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type up(upSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIte(maxIteSEXP);
    rcpp_result_gen = Rcpp::wrap(rootf2(resSq, n, d, low, up, tol, maxIte));
    return rcpp_result_gen;
END_RCPP
}
// huberMean
Rcpp::List huberMean(const arma::vec& X, const double epsilon, const int iteMax);
RcppExport SEXP _tfHuber_huberMean(SEXP XSEXP, SEXP epsilonSEXP, SEXP iteMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const int >::type iteMax(iteMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(huberMean(X, epsilon, iteMax));
    return rcpp_result_gen;
END_RCPP
}
// hMeanCov
double hMeanCov(const arma::vec& Z, const int n, const int d, const double epsilon, const int iteMax);
RcppExport SEXP _tfHuber_hMeanCov(SEXP ZSEXP, SEXP nSEXP, SEXP dSEXP, SEXP epsilonSEXP, SEXP iteMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const int >::type iteMax(iteMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(hMeanCov(Z, n, d, epsilon, iteMax));
    return rcpp_result_gen;
END_RCPP
}
// huberCov
arma::mat huberCov(const arma::mat& X, const double epsilon, const int iteMax);
RcppExport SEXP _tfHuber_huberCov(SEXP XSEXP, SEXP epsilonSEXP, SEXP iteMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const int >::type iteMax(iteMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(huberCov(X, epsilon, iteMax));
    return rcpp_result_gen;
END_RCPP
}
// huberReg
Rcpp::List huberReg(const arma::mat& X, const arma::vec& Y, const double epsilon, const double constTau, const int iteMax);
RcppExport SEXP _tfHuber_huberReg(SEXP XSEXP, SEXP YSEXP, SEXP epsilonSEXP, SEXP constTauSEXP, SEXP iteMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const double >::type constTau(constTauSEXP);
    Rcpp::traits::input_parameter< const int >::type iteMax(iteMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(huberReg(X, Y, epsilon, constTau, iteMax));
    return rcpp_result_gen;
END_RCPP
}
// sgn
int sgn(const double x);
RcppExport SEXP _tfHuber_sgn(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sgn(x));
    return rcpp_result_gen;
END_RCPP
}
// softThresh
arma::vec softThresh(const arma::vec& x, const arma::vec& lambda);
RcppExport SEXP _tfHuber_softThresh(SEXP xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(softThresh(x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// cmptLambda
arma::vec cmptLambda(const arma::vec& beta, const double lambda);
RcppExport SEXP _tfHuber_cmptLambda(SEXP betaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(cmptLambda(beta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// loss
double loss(const arma::vec& Y, const arma::vec& Ynew, const std::string lossType, const double tau);
RcppExport SEXP _tfHuber_loss(SEXP YSEXP, SEXP YnewSEXP, SEXP lossTypeSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ynew(YnewSEXP);
    Rcpp::traits::input_parameter< const std::string >::type lossType(lossTypeSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(loss(Y, Ynew, lossType, tau));
    return rcpp_result_gen;
END_RCPP
}
// gradLoss
arma::vec gradLoss(const arma::mat& X, const arma::vec& Y, const arma::vec& beta, const std::string lossType, const double tau);
RcppExport SEXP _tfHuber_gradLoss(SEXP XSEXP, SEXP YSEXP, SEXP betaSEXP, SEXP lossTypeSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type lossType(lossTypeSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(gradLoss(X, Y, beta, lossType, tau));
    return rcpp_result_gen;
END_RCPP
}
// updateBeta
arma::vec updateBeta(const arma::mat& X, const arma::vec& Y, arma::vec beta, const double phi, const arma::vec& Lambda, const std::string lossType, const double tau);
RcppExport SEXP _tfHuber_updateBeta(SEXP XSEXP, SEXP YSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP LambdaSEXP, SEXP lossTypeSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type lossType(lossTypeSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(updateBeta(X, Y, beta, phi, Lambda, lossType, tau));
    return rcpp_result_gen;
END_RCPP
}
// cmptPsi
double cmptPsi(const arma::mat& X, const arma::vec& Y, const arma::vec& betaNew, const arma::vec& beta, const double phi, const std::string lossType, const double tau);
RcppExport SEXP _tfHuber_cmptPsi(SEXP XSEXP, SEXP YSEXP, SEXP betaNewSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP lossTypeSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type betaNew(betaNewSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const std::string >::type lossType(lossTypeSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cmptPsi(X, Y, betaNew, beta, phi, lossType, tau));
    return rcpp_result_gen;
END_RCPP
}
// LAMM
Rcpp::List LAMM(const arma::mat& X, const arma::vec& Y, const arma::vec& Lambda, arma::vec beta, const double phi, const std::string lossType, const double tau, const double gamma);
RcppExport SEXP _tfHuber_LAMM(SEXP XSEXP, SEXP YSEXP, SEXP LambdaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP lossTypeSEXP, SEXP tauSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const std::string >::type lossType(lossTypeSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(LAMM(X, Y, Lambda, beta, phi, lossType, tau, gamma));
    return rcpp_result_gen;
END_RCPP
}
// lasso
arma::vec lasso(const arma::mat& X, const arma::vec& Y, const double lambda, const double phi0, const double gamma, const double epsilon_c, const int iteMax);
RcppExport SEXP _tfHuber_lasso(SEXP XSEXP, SEXP YSEXP, SEXP lambdaSEXP, SEXP phi0SEXP, SEXP gammaSEXP, SEXP epsilon_cSEXP, SEXP iteMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type phi0(phi0SEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon_c(epsilon_cSEXP);
    Rcpp::traits::input_parameter< const int >::type iteMax(iteMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(lasso(X, Y, lambda, phi0, gamma, epsilon_c, iteMax));
    return rcpp_result_gen;
END_RCPP
}
// huberLasso
Rcpp::List huberLasso(const arma::mat& X, const arma::vec& Y, const double lambda, double tau, const double constTau, const double phi0, const double gamma, const double epsilon_c, const int iteMax);
RcppExport SEXP _tfHuber_huberLasso(SEXP XSEXP, SEXP YSEXP, SEXP lambdaSEXP, SEXP tauSEXP, SEXP constTauSEXP, SEXP phi0SEXP, SEXP gammaSEXP, SEXP epsilon_cSEXP, SEXP iteMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double >::type constTau(constTauSEXP);
    Rcpp::traits::input_parameter< const double >::type phi0(phi0SEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon_c(epsilon_cSEXP);
    Rcpp::traits::input_parameter< const int >::type iteMax(iteMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(huberLasso(X, Y, lambda, tau, constTau, phi0, gamma, epsilon_c, iteMax));
    return rcpp_result_gen;
END_RCPP
}
// getIndex
arma::uvec getIndex(const int n, const int low, const int up);
RcppExport SEXP _tfHuber_getIndex(SEXP nSEXP, SEXP lowSEXP, SEXP upSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type low(lowSEXP);
    Rcpp::traits::input_parameter< const int >::type up(upSEXP);
    rcpp_result_gen = Rcpp::wrap(getIndex(n, low, up));
    return rcpp_result_gen;
END_RCPP
}
// getIndexComp
arma::uvec getIndexComp(const int n, const int low, const int up);
RcppExport SEXP _tfHuber_getIndexComp(SEXP nSEXP, SEXP lowSEXP, SEXP upSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type low(lowSEXP);
    Rcpp::traits::input_parameter< const int >::type up(upSEXP);
    rcpp_result_gen = Rcpp::wrap(getIndexComp(n, low, up));
    return rcpp_result_gen;
END_RCPP
}
// pairPred
double pairPred(const arma::mat& X, const arma::vec& Y, const arma::vec& beta);
RcppExport SEXP _tfHuber_pairPred(SEXP XSEXP, SEXP YSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(pairPred(X, Y, beta));
    return rcpp_result_gen;
END_RCPP
}
// cvHuberLasso
Rcpp::List cvHuberLasso(const arma::mat& X, const arma::vec& Y, Rcpp::Nullable<Rcpp::NumericVector> lSeq, int nlambda, const double constTau, const double phi0, const double gamma, const double epsilon_c, const int iteMax, int nfolds);
RcppExport SEXP _tfHuber_cvHuberLasso(SEXP XSEXP, SEXP YSEXP, SEXP lSeqSEXP, SEXP nlambdaSEXP, SEXP constTauSEXP, SEXP phi0SEXP, SEXP gammaSEXP, SEXP epsilon_cSEXP, SEXP iteMaxSEXP, SEXP nfoldsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type lSeq(lSeqSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type constTau(constTauSEXP);
    Rcpp::traits::input_parameter< const double >::type phi0(phi0SEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon_c(epsilon_cSEXP);
    Rcpp::traits::input_parameter< const int >::type iteMax(iteMaxSEXP);
    Rcpp::traits::input_parameter< int >::type nfolds(nfoldsSEXP);
    rcpp_result_gen = Rcpp::wrap(cvHuberLasso(X, Y, lSeq, nlambda, constTau, phi0, gamma, epsilon_c, iteMax, nfolds));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tfHuber_f1", (DL_FUNC) &_tfHuber_f1, 3},
    {"_tfHuber_rootf1", (DL_FUNC) &_tfHuber_rootf1, 6},
    {"_tfHuber_f2", (DL_FUNC) &_tfHuber_f2, 4},
    {"_tfHuber_rootf2", (DL_FUNC) &_tfHuber_rootf2, 7},
    {"_tfHuber_huberMean", (DL_FUNC) &_tfHuber_huberMean, 3},
    {"_tfHuber_hMeanCov", (DL_FUNC) &_tfHuber_hMeanCov, 5},
    {"_tfHuber_huberCov", (DL_FUNC) &_tfHuber_huberCov, 3},
    {"_tfHuber_huberReg", (DL_FUNC) &_tfHuber_huberReg, 5},
    {"_tfHuber_sgn", (DL_FUNC) &_tfHuber_sgn, 1},
    {"_tfHuber_softThresh", (DL_FUNC) &_tfHuber_softThresh, 2},
    {"_tfHuber_cmptLambda", (DL_FUNC) &_tfHuber_cmptLambda, 2},
    {"_tfHuber_loss", (DL_FUNC) &_tfHuber_loss, 4},
    {"_tfHuber_gradLoss", (DL_FUNC) &_tfHuber_gradLoss, 5},
    {"_tfHuber_updateBeta", (DL_FUNC) &_tfHuber_updateBeta, 7},
    {"_tfHuber_cmptPsi", (DL_FUNC) &_tfHuber_cmptPsi, 7},
    {"_tfHuber_LAMM", (DL_FUNC) &_tfHuber_LAMM, 8},
    {"_tfHuber_lasso", (DL_FUNC) &_tfHuber_lasso, 7},
    {"_tfHuber_huberLasso", (DL_FUNC) &_tfHuber_huberLasso, 9},
    {"_tfHuber_getIndex", (DL_FUNC) &_tfHuber_getIndex, 3},
    {"_tfHuber_getIndexComp", (DL_FUNC) &_tfHuber_getIndexComp, 3},
    {"_tfHuber_pairPred", (DL_FUNC) &_tfHuber_pairPred, 3},
    {"_tfHuber_cvHuberLasso", (DL_FUNC) &_tfHuber_cvHuberLasso, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_tfHuber(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
